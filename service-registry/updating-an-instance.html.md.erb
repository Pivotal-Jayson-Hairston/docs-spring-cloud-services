---
title: Updating an Instance
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

You can update settings on a Service Registry service instance using the Cloud Foundry Command Line Interface tool (cf CLI). The `cf update-service` command can be given a `-c` flag with a JSON object containing parameters used to configure the service instance.

To update a Service Registry service instance's settings, target the org and space of the service instance:

<pre class="terminal">
$ cf target -o myorg -s development

API endpoint:   https://api.run.pivotal.io (API version: 2.61.0)
User:           username@example.com
Org:            myorg
Space:          development
</pre>

Then run `cf update-service SERVICE_NAME -c '{ "PARAMETER": "VALUE" }'`, where `SERVICE_NAME` is the name of the service instance, `PARAMETER` is a supported parameter, and `VALUE` is the value for the parameter. For information about supported parameters, see the next section.

## <a id="configuration-parameters"></a>Configuration Parameters

General parameters accepted for the Service Registry are listed below.

| Parameter               | Function                         | Example                          |
|-------------------------|----------------------------------|----------------------------------|
| <code>count</code>      | The number of nodes to provision | <code>'{"count": 3}'</code>      |
| <code>upgrade</code>    | Whether to upgrade the instance  | <code>'{"upgrade": true}'</code> |

To update a service instance and set the count of nodes for running in high-availability mode, run:

<pre class="terminal">
$ cf update-service service-registry -c '{"count": 3}'
Updating service instance service-registry as username@example.com...
OK

Update in progress. Use 'cf services' or 'cf service service-registry' to check operation status.
</pre>

As the command output suggests, you can use the `cf services` or `cf service` commands to check the status of the service instance. When the update is complete, the `cf service` command will give a status of `update succeeded`:

<pre class="terminal">
$ cf service service-registry

Service instance: service-registry
Service: p-service-registry
Bound apps: agency,company
Tags: 
Plan: standard
Description: Service Registry for Spring Cloud Applications
Documentation url: http://docs.pivotal.io/spring-cloud-services/
Dashboard: https://spring-cloud-service-broker.cfapps.io/dashboard/p-service-registry/01460799-7ba8-4775-ba63-5b3f6c350d6c

Last Operation
Status: update succeeded
Message: 
Started: 2016-09-09T17:54:52Z
Updated: 2016-09-09T17:57:02Z
</pre>

The service instance is now updated and ready to be used. For information about registering an application with a Service Registry service instance or calling an application which has been registered with a Service Registry service instance, see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html">Writing Client Applications</a> topic.

### <a id="peer-replication-across-pcf-deployments"></a>Peer Replication Across PCF Deployments

You can configure a Service Registry service instance to replicate service registrations with a Service Registry service instance in another PCF deployment (e.g. a PCF deployment in another datacenter). To do so, you must specify the peer Service Registry instance's URI using the `peers` JSON array, which contains an object for each Service Registry peer. You can find a Service Registry service instance's URI on its dashboard (see the [Using the Dashboard](/spring-cloud-services/service-registry/using-the-dashboard.html) topic).

A Service Registry peer can be expressed as shown in the following JSON:

```
'{ "peers": [ {"uri": "https://eureka-c9b8c.wise2.com"} ] }'
```

Peer URIs must use the HTTPS URI scheme (as `https://`) and must follow the format `https://eureka-GUID.APPLICATION_DOMAIN.TLD`, where `GUID` is the GUID assigned to a Service Registry service instance and `APPLICATION_DOMAIN.TLD` is the application domain of the PCF deployment where that Service Registry service instance is running.

Spring Cloud Services will by default validate the SSL certificate on each peer. You can disable this validation for a given peer by setting the `skipSslValidation` parameter to `true` for that peer, as shown in the following JSON:

```
'{ "peers": [ {"uri": "https://eureka-c9b8c.wise2.com", "skipSslValidation": true} ] }'
```

<p class='note'><strong>Note</strong>: If you disable certificate validation for a Service Registry service instance's peer, you must set the <code>TRUST_CERTS</code> environment variable on each application bound to that Service Registry service instance or to the peer. See the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#self-signed-ssl-certificate">Add Self-Signed SSL Certificate to JVM Truststore</a> section of the <a href="/spring-cloud-services/service-registry/writing-client-applications.html">Writing Client Applications</a> topic for more information.</p>

The parameters used to configure a peer for the Service Registry are listed below.

| Parameter                                  | Function                                                                                                                                              |
|--------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>peers[i].uri</code>                  | The URI of the Service Registry peer                                                                                                                  |
| <code>peers[i].skipSslValidation</code>    | Whether to skip SSL validation for the Service Registry peer. Valid values are <code>true</code> and <code>false</code> (default: <code>false</code>) |

To update a Service Registry service instance so that it replicates a registry with a peer in another PCF deployment, allowing for validation of the peer's SSL certificate, run:

<pre class="terminal">
$ cf update-service service-registry -c '{ "peers": [ {"uri": "https://eureka-c9b8c.wise2.com"} ] }'
</pre>

To update a Service Registry service instance so that it replicates a registry with a peer in another PCF deployment, skipping validation of the peer's SSL certificate, run:

<pre class="terminal">
$ cf update-service service-registry -c '{ "peers": [ {"uri": "https://eureka-c9b8c.wise2.com", "skipSslValidation": true} ] }'
</pre>

<p class='note'><strong>Important</strong>: If you provide a peer URI which does not correspond to an available Service Registry service instance (e.g. if there is a typo in the peer URI) or if you do not disable SSL certificate validation for a peer and the associated SSL certificate cannot be verified, the <code>cf update-service</code> command may run successfully and the service instance status may be set to <code>update succeeded</code>, but the peer will not be used by the Service Registry service instance. In such a case, an error will appear on the Service Registry dashboard. See the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html#error-conditions">Error Conditions</a> section of the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html">Using the Dashboard</a> topic for more information.</p>

### <a id="peer-replication-across-orgs-or-spaces"></a>Peer Replication Across Orgs or Spaces 

You can configure a Service Registry service instance to replicate service registrations with a Service Registry service instance in another PCF organization or space. To do so, you must specify the peer Service Registry instance's URI using the `peers` JSON array, which contains an object for each Service Registry peer. The URI is set in the `peers[i].uri` parameter. You can find a Service Registry service instance's URI on its dashboard (see the [Using the Dashboard](/spring-cloud-services/service-registry/using-the-dashboard.html) topic).


A Service Registry peer can be expressed as shown in the following JSON:

```
'{ "peers": [ {"uri": "https://eureka-beed72e2.wise.com"} ] }'
```

Peer URIs must use the HTTPS URI scheme (as `https://`) and must follow the format `https://eureka-GUID.APPLICATION_DOMAIN.TLD`, where `GUID` is the GUID assigned to a Service Registry service instance and `APPLICATION_DOMAIN.TLD` is the application domain of the PCF deployment where that Service Registry service instance is running.

To update a Service Registry service instance so that it replicates a registry with a peer in another PCF organization, run:

<pre class="terminal">
$ cf update-service service-registry -c '{ "peers": [ {"uri": "https://eureka-beed72e2.wise.com"} ] }'
</pre>

<p class='note'><strong>Important</strong>: If you provide a peer URI which does not correspond to an available Service Registry service instance (e.g. if there is a typo in the peer URI) or if you do not disable SSL certificate validation for a peer and the associated SSL certificate cannot be verified, the <code>cf update-service</code> command may run successfully and the service instance status may be set to <code>update succeeded</code>, but the peer will not be used by the Service Registry service instance. In such a case, an error will appear on the Service Registry dashboard. See the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html#error-conditions">Error Conditions</a> section of the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html">Using the Dashboard</a> topic for more information.</p>
