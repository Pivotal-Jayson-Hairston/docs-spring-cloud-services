---
title: Writing Client Applications
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting/tree/1.1">"greeting" repository</a> to follow along with the code in this topic._

To register your application with a Service Registry service instance or use it to consume a service that is registered with a Service Registry service instance, you must add the dependencies listed in the <a href="/spring-cloud-services/client-dependencies.html">Client Dependencies</a> topic to your application's build file. Be sure to include the dependencies for <a href="/spring-cloud-services/client-dependencies.html#service-registry">Service Registry</a> as well.

<p class='note'><strong>Important</strong>: Because of a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>, the Spring Cloud Services Starters for Service Registry will by default cause all application endpoints to be protected by HTTP Basic authentication. If you wish to disable this, please see <a href="#disable-http-basic-auth">Disable HTTP Basic Authentication</a> below.</p>

## <a id="peers-with-self-signed-certificates"></a>Service Registry Peers with Self-Signed Certificates

If binding your application to a Service Registry service instance that has one or more peers in another PCF deployment which uses self-signed certificates, you must set the `TRUST_CERTS` environment variable on your application to a hostname on the other PCF deployment in order for your application to communicate with applications bound to those Service Registry peers:

<pre class="terminal">
$ cf set-env message-generation TRUST_CERTS api.cf.otherwise.com
Setting env variable 'TRUST_CERTS' to 'api.cf.otherwise.com' for app message-generation in org myorg / space development as user...
OK
TIP: Use 'cf restage message-generation' to ensure your env variable changes take effect
$ cf restage message-generation
</pre>

As the output from the ```cf set-env``` command suggests, restage the application after setting the environment variable.

## <a id="register-a-service"></a>Register a Service

Follow the below instructions to register an application with a Service Registry service instance.

### <a id="identify-the-application"></a>Identify the Application

Your service application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/message-generation/src/main/java/message_generation/MessageGenerationApplication.java#L13-L16">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class MessageGenerationApplication {
    //...
```

The `MessageGenerationApplication` class also has <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/message-generation/src/main/java/message_generation/MessageGenerationApplication.java#L24-L28">a `/greeting` endpoint</a> which gives a JSON `Greeting` object.

```java
    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="salutation",
                              defaultValue="Hello") String salutation,
                             @RequestParam(value="name",
                              defaultValue="Bob") String name) {
        //...
        return new Greeting(salutation, name);
    }
```

The application's Eureka instance name (the name by which it will be registered in Eureka) will be derived from the value of the ```spring.application.name``` property on the application. If you do not provide a value for this property, the application's Eureka instance name will be derived from its Cloud Foundry application name, as set in `manifest.yml`:

```yml
---
instances: 1
memory: 1G
applications:
  - name: message-generation
  ...
```

Set the `spring.application.name` property in <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/message-generation/src/main/resources/application.yml#L1-L3">`application.yml`</a>:

```yml
spring:
  application:
    name: message-generation
```

<p class='note'><strong>Note</strong>: If the application name contains characters which are invalid in a hostname, the application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character (for example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>). See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

### <a id="register-the-application"></a>Register the Application

Optionally, you may also specify the registration method that you wish to use for the application, using the `spring.cloud.services.registrationMethod` property. It can take either of two values:

* ```route```: The application will be registered using its Cloud Foundry route.
* ```direct```: The application will be registered using its host IP and port.

The default value for the ```registrationMethod``` property is ```route```. You may also provide configuration using properties under ```eureka.instance```, such as ```eureka.instance.hostname``` and ```eureka.instance.nonSecurePort``` (see the [Spring Cloud Netflix documentation](http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_service_discovery_eureka_clients)); if you do, those properties will override the value of ```registrationMethod```.

See below for information about the ```route``` and ```direct``` registration methods.

#### Route Registration

An application deployed to PCF can have one or more URLs, or "routes," bound to it. If you specify the ```route``` registration method, the application will be registered with the Service Registry instance using the first of these routes from the ```uris``` list in the application's ```VCAP_APPLICATION``` environment variable.

```json
{
 "VCAP_APPLICATION": {

  "name": "message-generation",
  "space_id": "0fa9f93a-d1fa-43c8-b11b-f95b7e36fd32",
  "space_name": "development",
  "uris": [
   "message-generation.wise.com"
  ],
```

Requests from client applications to this registered application go through the Pivotal Cloud Foundry Router, and the Router provides load balancing between the clients and registered applications.

<!---
```java
// TODO: diagram showing Router use?
```
-->

This registration method is compatible with all deployments of PCF.

#### Direct Registration

<p class='note'><strong>Note</strong>: Direct registration cannot be used with Service Registry on Pivotal Web Services.</p>

An application running on Pivotal Cloud Foundry is provided with an externally-accessible IP address and port, which are made available in two environment variables: ```CF_INSTANCE_IP``` and ```CF_INSTANCE_PORT```. If you specify the ```direct``` registration method, the application will be registered with the Service Registry instance using this IP address and port.

Requests from client applications to this registered application will not go through the Pivotal Cloud Foundry Router. You can provide client-side load balancing using [Spring Cloud and Netflix Ribbon](http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#spring-cloud-ribbon).

To enable direct registration, the PCF environment must be configured to allow traffic across containers or cells. For PCF 1.6, the "Enable cross-container traffic" option must be enabled in the **Security Config** tab of the Pivotal Elastic Runtime tile's settings in Pivotal Cloud Foundry Operations Manager. For PCF 1.7, [application security groups](http://docs.cloudfoundry.org/adminguide/app-sec-groups.html) must be configured to allow direct communication between applications across cells.

#### Specify a Registration Method

If you do wish to specify a registration method, set the ```spring.cloud.services.registrationMethod``` property. In <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/message-generation/src/main/resources/application.yml#L1-L6">`application.yml`</a>:

```yml
spring:
  application:
    name: message-generation
  cloud:
    services:
      registrationMethod: route
```

As mentioned above, the ```route``` method is the default; it will be used if you do not specify ```registrationMethod```.

With the ```spring.application.name``` property set, you can now bind the application to a Service Registry instance. Once it has been bound and restaged and has successfully registered with the Registry, you will see it listed in the Service Registry dashboard (see the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html">Using the Dashboard</a> topic).

<%= image_tag("service-registry/registered_service.png") %>

## <a id="consume-a-service"></a>Consume a Service

Follow the below instructions to consume a service that is registered with a Service Registry service instance.

### <a id="discover-and-consume-a-service-using-resttemplate"></a>Discover and Consume a Service Using RestTemplate

A consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/greeter/src/main/java/greeter/GreeterApplication.java#L22-L34">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class GreeterApplication {

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    @Autowired
    private RestTemplate rest;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Note</strong>: If the name of the registered application contains characters which are invalid in a hostname, that application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character. For example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>. See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

By default, Service Registry requires HTTPS for access to registered services. If your client application is consuming a service application which has been registered with the Service Registry instance using route registration (see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#register-the-application">Register the Application</a> section above), you have two options:

1. Use the ```https://``` URI scheme to access the service.
1. In your application configuration, set the ```ribbon.IsSecure``` property to ```false```, and use the ```http://``` URI scheme to access the service.

If you wish to use HTTP rather than HTTPS, set ```ribbon.IsSecure``` first. In ```application.yml```:

```yml
ribbon:
  IsSecure: false
```

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so in the Greeter application, <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/greeter/src/main/java/greeter/GreeterApplication.java#L40-L50">the `hello()` method on the `GreeterApplication` class</a> uses the base URI ```http://message-generation``` to get a greeting message from Message Generation.

```java
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello(@RequestParam(value="salutation",
                                        defaultValue="Hello") String salutation,
                        @RequestParam(value="name",
                                        defaultValue="Bob") String name) {
        URI uri = UriComponentsBuilder.fromUriString("http://message-generation/greeting")
            .queryParam("salutation", salutation)
            .queryParam("name", name)
            .build()
            .toUri();

        Greeting greeting = rest.getForObject(uri, Greeting.class);
        return greeting.getMessage();
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/greeter/src/main/java/greeter/GreeterApplication.java#L52-L65">Greeter's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Message Generation.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

The Greeter application now responds with a customizable ```Greeting``` when you access its ```/hello``` endpoint.

<pre class="terminal">
$ curl http://greeter.wise.com/hello
Hello, Bob!

$ curl http://greeter.wise.com/hello?name=John
Hello, John!
</pre>

### <a id="discover-and-consume-a-service-using-feign"></a>Discover and Consume a Service Using Feign

If you wish to use [Feign](https://github.com/Netflix/feign) to consume a service that is registered with a Service Registry instance, your application must declare ```spring-cloud-starter-feign``` as a dependency. In order to have Feign client interfaces automatically configured, it must also use the ```@EnableFeignClients``` annotation.

Your consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/feign-greeter/src/main/java/greeter/GreeterApplication.java#L18-L25">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>. In the Greeter application, the ```GreeterApplication``` class contains a ```MessageGenerationClient``` interface, which is a Feign client for the Message Generation application.

```java
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@RestController
public class GreeterApplication {

    @Autowired
    MessageGenerationClient messageGeneration;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Note</strong>: If the name of the registered application contains characters which are invalid in a hostname, that application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character. For example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>. See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

By default, Service Registry requires HTTPS for access to registered services. If your client application is consuming a service application which has been registered with the Service Registry instance using route registration (see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#register-the-application">Register the Application</a> section above), you have two options:

1. Use the ```https://``` URI scheme to access the service.
1. In your application configuration, set the ```ribbon.IsSecure``` property to ```false```, and use the ```http://``` URI scheme to access the service.

If you wish to use HTTP rather than HTTPS, set ```ribbon.IsSecure``` first. In ```application.yml```:

```yml
ribbon:
  IsSecure: false
```

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so the ```@FeignClient``` annotation on the <a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/feign-greeter/src/main/java/greeter/GreeterApplication.java#L52-L56">```MessageGenerationClient``` interface</a> uses the base URI ```http://message-generation```. The interface declares one method, ```greeting()```, which accesses the Message Generation application's ```/greeting``` endpoint and sends along optional ```name``` and ```salutation``` parameters if they are provided.

```java
    @FeignClient("http://message-generation")
    interface MessageGenerationClient {
      @RequestMapping(value = "/greeting", method = GET)
      Greeting greeting(@RequestParam("name") String name, @RequestParam("salutation") String salutation);
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/feign-greeter/src/main/java/greeter/GreeterApplication.java#L37-L50">Greeter's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Message Generation.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.1/feign-greeter/src/main/java/greeter/GreeterApplication.java#L27-L31">Its ```greeting()``` method</a> is mapped to the ```/hello``` endpoint and calls the ```greeting()``` method on ```MessageGenerationClient``` to get a greeting.

```java
    @RequestMapping(value = "/hello", method = GET)
    public String greeting(@RequestParam(value="salutation", defaultValue="Hello") String salutation, @RequestParam(value="name", defaultValue="Bob") String name) {
      Greeting greeting =  messageGeneration.greeting(name, salutation);
      return greeting.getMessage();
    }
```

The Greeter application now responds with a customizable ```Greeting``` when you access its ```/hello``` endpoint.

<pre class="terminal">
$ curl http://greeter.wise.com/hello
Hello, Bob!

$ curl http://greeter.wise.com/hello?name=John
Hello, John!
</pre>

## <a id="disable-http-basic-auth"></a>Disable HTTP Basic Authentication

The Spring Cloud Services Starter for Service Registry has a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>. Unless your application has other security configuration, this will cause all application endpoints to be protected by HTTP Basic authentication.

If you do not yet want to address application security, you may turn off Basic authentication by setting the `security.basic.enabled` property to `false`. In `application.yml` or `bootstrap.yml`:

```yml
security:
  basic:
    enabled: false
```

You might make this setting specific to a profile (such as the `dev` profile if you want Basic authentication disabled only for development):

```yml
---

spring:
  profiles: dev

security:
  basic:
    enabled: false
```

For more information, see ["Security" in the Spring Boot Reference Guide](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-security).
