---
title: Writing Client Applications
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting/tree/1.2">"greeting" repository</a> to follow along with the code in this topic._

## <a id="add-application-dependencies"></a>Add Application Dependencies for Service Registry

<p class='note'><strong>Important</strong>: Ensure that the ordering of the Maven BOM dependencies listed below is preserved in your application's build file. Dependency resolution is affected in both Maven and Gradle by the order in which dependencies are declared.</p>

To work with Spring Cloud Services service instances, your client application must include the `spring-cloud-services-dependencies` and `spring-cloud-dependencies` BOMs. Unless you are using the `spring-boot-starter-parent` or Spring Boot Gradle plugin, you must also specify the `spring-boot-dependencies` BOM as a dependency.

If using Maven, include in `pom.xml`:

```xml
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.3.5.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.pivotal.spring.cloud</groupId>
            <artifactId>spring-cloud-services-dependencies</artifactId>
            <version>1.2.0.RELEASE</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>Brixton.SR6</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
  </dependencyManagement>
```

If not using the `spring-boot-starter-parent`, include in the `<dependencyManagement>` block of `pom.xml`:

```
  <dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>1.3.5.RELEASE</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>

        <!-- ... -->

    </dependencies>
  </dependencyManagement>
```

If using Gradle, you will also need to use the <a href="https://github.com/spring-gradle-plugins/dependency-management-plugin">Gradle dependency management plugin</a>.

Include in `build.gradle`:

```groovy
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

apply plugin: "java"
apply plugin: "spring-boot"
apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR6"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:1.2.0.RELEASE"
    }
}

repositories {
    maven {
        url "https://repo.spring.io/plugins-release"
    }
}
```

If not using the Spring Boot Gradle plugin, include in the `dependencyManagement` block of `build.gradle`:

```groovy
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:1.3.5.RELEASE"
    }
}
```

To register your application with a Service Registry service instance or use it to consume a service that is registered with a Service Registry service instance, you must add the `spring-cloud-services-starter-service-registry` dependency.

If using Maven, include in `pom.xml`:

```
  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-service-registry</artifactId>
    </dependency>
  </dependencies>
```

If using Gradle, include in `build.gradle`:

```
dependencies {
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
}
```

<p class='note'><strong>Important</strong>: Because of a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>, the Spring Cloud Services Starters for Service Registry will by default cause all application endpoints to be protected by HTTP Basic authentication. If you wish to disable this, please see <a href="#disable-http-basic-auth">Disable HTTP Basic Authentication</a> below.</p>

## <a id="peers-with-self-signed-certificates"></a>Service Registry Peers with Self-Signed Certificates

If binding your application to a Service Registry service instance that has one or more peers in another PCF deployment which uses self-signed certificates, you must set the `TRUST_CERTS` environment variable on your application to a hostname on the other PCF deployment in order for your application to communicate with applications bound to those Service Registry peers:

<pre class="terminal">
$ cf set-env message-generation TRUST_CERTS api.otherwise.com
Setting env variable 'TRUST_CERTS' to 'api.otherwise.com' for app message-generation in org myorg / space development as username@example.com...
OK
TIP: Use 'cf restage message-generation' to ensure your env variable changes take effect
</pre>

The `TRUST_CERTS` environment variable can contain multiple hostnames, in case (e.g.) the Service Registry has peers in multiple alternate PCF deployments with self-signed certificates. Hostnames are comma-separated:

<pre class="terminal">
$ cf set-env message-generation TRUST_CERTS api.otherwise.com,api.verywise.com
Setting env variable 'TRUST_CERTS' to 'api.otherwise.com,api.verywise.com' for app message-generation in org myorg / space development as username@example.com...
OK
TIP: Use 'cf restage message-generation' to ensure your env variable changes take effect
</pre>

As the output from the ```cf set-env``` command suggests, restage the application after setting the environment variable.

<pre class="terminal">
$ cf restage message-generation
</pre>

## <a id="register-a-service"></a>Register a Service

To register with a Service Registry service instance, your application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/message-generation/src/main/java/message_generation/MessageGenerationApplication.java#L13-L16">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class MessageGenerationApplication {
    //...
```

The application's Eureka instance name (the name by which it will be registered in Eureka) will be derived from the value of the ```spring.application.name``` property on the application. If you do not provide a value for this property, the application's Eureka instance name will be derived from its Cloud Foundry application name, as set in `manifest.yml`:

```yml
---
instances: 1
memory: 1G
applications:
  - name: message-generation
  ...
```

Set the `spring.application.name` property in <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/message-generation/src/main/resources/application.yml#L1-L3">`application.yml`</a>:

```yml
spring:
  application:
    name: message-generation
```

<p class='note'><strong>Note</strong>: If the application name contains characters which are invalid in a hostname, the application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character (for example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>). See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

## <a id="consume-a-service"></a>Consume a Service

Follow the below instructions to consume a service that is registered with a Service Registry service instance.

### <a id="discover-and-consume-a-service-using-resttemplate"></a>Discover and Consume a Service Using RestTemplate

A consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/greeter/src/main/java/greeter/GreeterApplication.java#L22-L34">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class GreeterApplication {

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    @Autowired
    private RestTemplate rest;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Note</strong>: If the name of the registered application contains characters which are invalid in a hostname, that application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character. For example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>. See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

By default, Service Registry requires HTTPS for access to registered services. If your client application is consuming a service application which has been registered with the Service Registry instance using route registration (see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#register-the-application">Register the Application</a> section above), you can use a schemeless URI (as `//message-generation`) to access the service. Spring Cloud Netflix Ribbon will default to using an HTTPS route if one is available and to an HTTP route otherwise. (This behavior requires Spring Cloud Brixton.SR6 or later.)

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so in the Greeter application, <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/greeter/src/main/java/greeter/GreeterApplication.java#L40-L50">the `hello()` method on the `GreeterApplication` class</a> uses the base URI ```//message-generation``` to get a greeting message from Message Generation.

```java
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello(@RequestParam(value="salutation",
                                        defaultValue="Hello") String salutation,
                        @RequestParam(value="name",
                                        defaultValue="Bob") String name) {
        URI uri = UriComponentsBuilder.fromUriString("//message-generation/greeting")
            .queryParam("salutation", salutation)
            .queryParam("name", name)
            .build()
            .toUri();

        Greeting greeting = rest.getForObject(uri, Greeting.class);
        return greeting.getMessage();
    }
```

### <a id="discover-and-consume-a-service-using-feign"></a>Discover and Consume a Service Using Feign

If you wish to use [Feign](https://github.com/Netflix/feign) to consume a service that is registered with a Service Registry instance, your application must declare ```spring-cloud-starter-feign``` as a dependency. In order to have Feign client interfaces automatically configured, it must also use the ```@EnableFeignClients``` annotation.

Your consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/feign-greeter/src/main/java/greeter/GreeterApplication.java#L18-L25">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>. In the Greeter application, the ```GreeterApplication``` class contains a ```MessageGenerationClient``` interface, which is a Feign client for the Message Generation application.

```java
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@RestController
public class GreeterApplication {

    @Autowired
    MessageGenerationClient messageGeneration;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Note</strong>: If the name of the registered application contains characters which are invalid in a hostname, that application will be registered with the Service Registry service instance using the application name with each invalid character replaced by a hyphen (<code>-</code>) character. For example, given an application name of "message_generation", the virtual hostname used to register the application with the Service Registry service instance will be <code>message-generation</code>. See the <a href="/spring-cloud-services/service-registry/connectors.html#eureka-virtual-hostname-configuration">Eureka Virtual Hostname Configuration</a> section of the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> topic for more information.</p>

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so the ```@FeignClient``` annotation on the <a href="https://github.com/spring-cloud-samples/greeting/blob/1.2/feign-greeter/src/main/java/greeter/GreeterApplication.java#L52-L56">```MessageGenerationClient``` interface</a> uses the base URI ```http://message-generation```. The interface declares one method, ```greeting()```, which accesses the Message Generation application's ```/greeting``` endpoint and sends along optional ```name``` and ```salutation``` parameters if they are provided.

```java
    @FeignClient("http://message-generation")
    interface MessageGenerationClient {
      @RequestMapping(value = "/greeting", method = GET)
      Greeting greeting(@RequestParam("name") String name, @RequestParam("salutation") String salutation);
    }
```

## <a id="disable-http-basic-auth"></a>Disable HTTP Basic Authentication

The Spring Cloud Services Starter for Service Registry has a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>. Unless your application has other security configuration, this will cause all application endpoints to be protected by HTTP Basic authentication.

If you do not yet want to address application security, you may turn off Basic authentication by setting the `security.basic.enabled` property to `false`. In `application.yml` or `bootstrap.yml`:

```yml
security:
  basic:
    enabled: false
```

You might make this setting specific to a profile (such as the `dev` profile if you want Basic authentication disabled only for development):

```yml
---

spring:
  profiles: dev

security:
  basic:
    enabled: false
```

For more information, see ["Security" in the Spring Boot Reference Guide](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-security).
